import datetime

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials, SpotifyOAuth
from dotenv import dotenv_values

from apple_music_handler import AppleMusicHandler
from classes.Track import Track

config = dotenv_values('.env')  # create .env file

CLIENT_ID = config['SPOT_CLIENT_ID']
CLIENT_SECRET = config['SPOT_CLIENT_SECRET']
PLAYLIST_URI = config['SPOT_PLAYLIST_URI']
USER_ID = config['SPOT_USER_ID']

SCOPES = [
    'user-library-modify',
    'user-library-read',
    'user-follow-read',
    'playlist-modify-private',
    'playlist-read-private',
    'playlist-modify-public',
]


class SpotifyHandler(object):
    def __init__(self, client_id, client_secret):

        o_auth = SpotifyOAuth(
            client_id=client_id,
            client_secret=client_secret,
            redirect_uri='http://localhost:8080',
            scope=SCOPES
        )
        print(f'Please visit following page and accept: {o_auth.get_authorize_url()}')

        # token_info = o_auth.get_access_token(as_dict=False)

        client_credentials = SpotifyClientCredentials(
            client_id=client_id,
            client_secret=client_secret,
        )

        self.spotify = spotipy.Spotify(
            client_credentials_manager=client_credentials,
            oauth_manager=o_auth,
        )

    def get_tracks_from_playlist(self, playlist_uri: str) -> [Track]:
        results = self.spotify.playlist_items(playlist_uri)
        items = results['items']  # initialize list with values already in results

        while results['next']:  # iterate through all result sets and extend tracks by new result
            results = self.spotify.next(results)
            items.extend(results['items'])

        track_info_list = []
        tracks = []

        for item in items:
            track_info_list.append(item['track'])

        for track_info in track_info_list:
            track_name = track_info['name']
            track_artists = []
            for artist in track_info['artists']:
                track_artists.append(artist['name'])

            track = Track(
                name=track_name,
                artists=track_artists
            )

            tracks.append(track)

        return tracks

    def _search_track(self, track: Track) -> Track:
        results = self.spotify.search(q=track)
        for track_info in results['tracks']['items']:
            track.id = track_info['id']  # updates track

        return track

    def create_playlist(self, user: str, name: str, public=True, collaborative=False) -> str:
        description = f'automatically generated by SpotifyAppleMusicSyncer ({datetime.datetime.now()})'
        self.spotify.user_playlist_create(user, name, public, collaborative, description=description)

        playlist_id = self.spotify.user_playlists(user)['items'][0]['id']
        return playlist_id

    def add_tracks_to_playlist(self, playlist_id, tracks: [Track]):
        items = []

        for track in tracks:
            item = self._search_track(track)
            items.append(item.id)
            print(item)

        self.spotify.playlist_add_items(playlist_id=playlist_id, items=items)


if __name__ == '__main__':
    spotify_handler = SpotifyHandler(
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET
    )

    track = Track(name="Train", artists=["Felguk"])
    tracks = [track]

    playlist_name = 'This is a test'
    # print(spotify_handler.spotify.current_user_saved_tracks())
    playlist_id = spotify_handler.create_playlist(USER_ID, playlist_name)
    spotify_handler.add_tracks_to_playlist(playlist_id=playlist_id, tracks=tracks)
