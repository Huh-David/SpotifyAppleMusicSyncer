import datetime
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials, SpotifyOAuth
from models.track import Track

SCOPES = [
    'user-library-modify',
    'user-library-read',
    'user-follow-read',
    'playlist-modify-private',
    'playlist-read-private',
    'playlist-modify-public',
]


class SpotifyHandler(object):
    def __init__(self, client_id, client_secret):

        o_auth = SpotifyOAuth(
            client_id=client_id,
            client_secret=client_secret,
            redirect_uri='http://localhost:8080',
            scope=SCOPES
        )
        print(f'Please visit following page and accept: {o_auth.get_authorize_url()}')

        o_auth.get_access_token(as_dict=False)

        client_credentials = SpotifyClientCredentials(
            client_id=client_id,
            client_secret=client_secret,
        )

        self.spotify = spotipy.Spotify(
            client_credentials_manager=client_credentials,
            oauth_manager=o_auth,
        )

    def get_tracks_from_playlist(self, playlist_uri: str) -> [Track]:
        results = self.spotify.playlist_items(playlist_uri)
        items = results['items']  # initialize list with values already in results

        while results['next']:  # iterate through all result sets and extend tracks by new result
            results = self.spotify.next(results)
            items.extend(results['items'])

        track_info_list = []
        tracks = []

        for item in items:
            track_info_list.append(item['track'])

        for track_info in track_info_list:
            track_name = track_info['name']
            track_artists = []
            for artist in track_info['artists']:
                track_artists.append(artist['name'])

            track = Track(
                name=track_name,
                artists=track_artists
            )

            tracks.append(track)

        return tracks

    def _search_track(self, track: Track) -> Track:
        try:
            results = self.spotify.search(q=track)
            for track_info in results['tracks']['items']:
                track.id = track_info['id']  # updates track
        except Exception as e:
            print(f'Could not find track named {track}\n\n{e}')
            track.id = None

        return track

    def create_playlist(self, user: str, name: str, public=True, collaborative=False) -> str:
        date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        description = f'automatically generated by SpotifyAppleMusicSyncer: {date}'
        self.spotify.user_playlist_create(user, name, public, collaborative, description=description)

        playlist_id = self.spotify.user_playlists(user)['items'][0]['id']
        return playlist_id

    def add_tracks_to_playlist(self, playlist_id: str, tracks: [Track]):
        items = []

        for index, track in enumerate(tracks):
            print(f'[{round(index / len(tracks) * 100):03}%] {track}')
            item = self._search_track(track)
            if item.id != 'spotify:track:None':
                items.append(item.id)

        self.spotify.playlist_add_items(playlist_id=playlist_id, items=items)
        print(f'[100%] Here you go: https://open.spotify.com/playlist/{playlist_id}')

    def clear_playlist(self, playlist_id: str):
        print(f'Clearing playlist [{playlist_id}]...', end='\r')

        items_to_delete = []
        results = self.spotify.playlist_items(playlist_id=playlist_id)
        for track_info in results['items']:
            items_to_delete.append(track_info['track']['id'])

        self.spotify.playlist_remove_all_occurrences_of_items(playlist_id=playlist_id, items=items_to_delete)

        print(f'Clearing of playlist [{playlist_id}] done!')

    def update_playlist_description(self, playlist_id: str):
        print(f'Updating playlist description of playlist [{playlist_id}] ...', end='\r')

        playlist = self.spotify.playlist(playlist_id=playlist_id)
        date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        old_description = playlist["description"]
        if '\nlast update by SpotifyAppleMusicSyncer: ' in old_description:
            new_description = f'{old_description[:-19]}{date}'
        else:
            new_description = f'{old_description}\nlast update by SpotifyAppleMusicSyncer: {date}'

        self.spotify.playlist_change_details(playlist_id=playlist_id, description=new_description)

        print(f'Updating of playlist description of playlist [{playlist_id}] done!')
